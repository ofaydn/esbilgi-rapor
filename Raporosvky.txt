<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Kapsamlı Sızma Testi Rapor Oluşturucu</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        @media print {
            body { -webkit-print-color-adjust: exact; color-adjust: exact; }
            .no-print { display: none !important; }
            #report-preview { box-shadow: none; border: none; margin: 0; padding: 0; }
            .report-page {
                page-break-after: always;
                border: none !important;
                box-shadow: none !important;
                border-radius: 0 !important;
            }
            .vulnerability-card { page-break-inside: avoid; }
            .toc-item { page-break-inside: avoid; }
            .summary-table { page-break-inside: avoid; }
        }
        .report-page {
            background: white;
            padding: 2.5rem;
            margin-bottom: 2rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            border: 1px solid #e5e7eb;
        }
        .report-page h2 {
            border-bottom: 2px solid #e5e7eb;
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
            font-size: 1.875rem;
            font-weight: 800;
            color: #111827;
        }
        .vulnerability-card { border-left-width: 4px; }
        .tab-button.active {
            border-color: #4f46e5;
            background-color: #eef2ff;
            color: #4f46e5;
        }
        textarea {
             white-space: pre-wrap;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="max-w-screen-2xl mx-auto p-4 sm:p-6 lg:p-8 grid grid-cols-12 gap-8">
        
        <!-- === KONTROL PANELİ (FORM ALANI) === -->
        <div class="no-print col-span-12 lg:col-span-5 xl:col-span-4 bg-white p-6 rounded-xl shadow-lg h-fit sticky top-8">
            <div class="flex justify-between items-center mb-4">
                 <h1 class="text-2xl font-bold text-gray-900">Rapor Oluşturucu</h1>
                 <button id="print-button" class="bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 transition duration-300 flex items-center">
                    <svg class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5 4v3H4a2 2 0 00-2 2v6a2 2 0 002 2h12a2 2 0 002-2V9a2 2 0 00-2-2h-1V4a2 2 0 00-2-2H7a2 2 0 00-2 2zm8 0H7v3h6V4zm0 8H7v4h6v-4z" clip-rule="evenodd" /></svg>
                    Yazdır/Kaydet
                </button>
            </div>
           
            <!-- Sekmeler -->
            <div class="mb-6 border-b border-gray-200">
                <nav class="flex -mb-px" id="tabs">
                    <button data-tab="tab-meta" class="tab-button active text-gray-600 hover:text-indigo-600 py-4 px-1 text-center border-b-2 font-medium text-sm flex-1">Rapor Bilgileri</button>
                    <button data-tab="tab-findings" class="tab-button text-gray-600 hover:text-indigo-600 py-4 px-1 text-center border-b-2 font-medium text-sm flex-1">Bulgu Ekle</button>
                    <button data-tab="tab-content" class="tab-button text-gray-600 hover:text-indigo-600 py-4 px-1 text-center border-b-2 font-medium text-sm flex-1">İçerik</button>
                </nav>
            </div>
            
            <!-- Sekme İçerikleri -->
            <div id="tab-content-container">
                <!-- Rapor Bilgileri Formu -->
                <div id="tab-meta" class="tab-pane space-y-4">
                    <h3 class="text-lg font-semibold text-gray-800">Genel Rapor Bilgileri</h3>
                    <div>
                        <label for="meta-kurumAdi" class="block text-sm font-medium text-gray-700">Kurum Adı</label>
                        <input type="text" id="meta-kurumAdi" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                    </div>
                    <div>
                        <label for="meta-testTuru" class="block text-sm font-medium text-gray-700">Test Türü</label>
                        <input type="text" id="meta-testTuru" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                    </div>
                     <div>
                        <label for="meta-versiyon" class="block text-sm font-medium text-gray-700">Versiyon</label>
                        <input type="text" id="meta-versiyon" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                    </div>
                    <div>
                        <label for="meta-testTarihi" class="block text-sm font-medium text-gray-700">Test Tarihi</label>
                        <input type="text" id="meta-testTarihi" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                    </div>
                     <div>
                        <label for="meta-testEkibi" class="block text-sm font-medium text-gray-700">Test Ekibi (Ad, Görev, Sertifika - Her satıra bir kişi)</label>
                        <textarea id="meta-testEkibi" rows="4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"></textarea>
                    </div>
                </div>

                <!-- Bulgu Ekleme Formu -->
                <form id="tab-findings" class="tab-pane hidden">
                     <h3 class="text-lg font-semibold text-gray-800 mb-4">Yeni Bulgu Ekle</h3>
                     <div class="space-y-4">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Ref No</label>
                                <input type="text" id="vuln-ref" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm" placeholder="Örn: EA001">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Kategori</label>
                                <select id="vuln-category" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                                    <option>İletişim Altyapısı ve Aktif Cihazlar</option>
                                    <option>DNS Servisleri</option>
                                    <option>Etki Alanı ve Kullanıcı Bilgisayarları</option>
                                    <option>E-posta Servisleri</option>
                                    <option>Veritabanı Sistemleri</option>
                                    <option>Uygulama Servisleri / Web Sunucuları</option>
                                    <option>Sosyal Mühendislik Güvenlik Testi</option>
                                </select>
                            </div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Bulgu Adı</label>
                            <input type="text" id="vuln-name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Risk Seviyesi</label>
                            <select id="vuln-severity" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                                <option>Yüksek</option>
                                <option>Orta</option>
                                <option>Düşük</option>
                                <option>Kritik</option>
                                <option>Acil</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Etkilenen Sistemler / IP Adresleri</label>
                            <input type="text" id="vuln-affected" placeholder="10.125.0.52, 10.125.0.53, ..." class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Bulgu Açıklaması (Markdown destekler)</label>
                            <textarea id="vuln-description" rows="6" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"></textarea>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Çözüm Önerisi (Markdown destekler)</label>
                            <textarea id="vuln-remediation" rows="4" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"></textarea>
                        </div>
                         <div>
                            <label class="block text-sm font-medium text-gray-700">Kanıt (Ekran Görüntüsü URL'leri - Her satıra bir tane)</label>
                            <textarea id="vuln-proof" rows="3" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm" placeholder="https://.../image1.png"></textarea>
                        </div>
                        <div class="text-right">
                           <button type="submit" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700">Bulgu Ekle</button>
                        </div>
                    </div>
                </form>
                
                <!-- Statik İçerik Formu -->
                <div id="tab-content" class="tab-pane hidden space-y-4">
                    <h3 class="text-lg font-semibold text-gray-800">Rapor Metinleri</h3>
                    <div>
                        <label for="content-executive" class="block text-sm font-medium text-gray-700">Yönetici Özeti</label>
                        <textarea id="content-executive" rows="8" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"></textarea>
                    </div>
                    <div>
                        <label for="content-assessment" class="block text-sm font-medium text-gray-700">Tüm Bulguların Birlikte Değerlendirilmesi</label>
                        <textarea id="content-assessment" rows="8" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"></textarea>
                    </div>
                    <div>
                        <label for="content-methodology" class="block text-sm font-medium text-gray-700">Metodoloji</label>
                        <textarea id="content-methodology" rows="8" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"></textarea>
                    </div>
                     <div>
                        <label for="content-scope" class="block text-sm font-medium text-gray-700">Kapsam</label>
                        <textarea id="content-scope" rows="5" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm sm:text-sm"></textarea>
                    </div>
                </div>
            </div>
             <div class="mt-6 text-center">
                <button id="clear-data" class="text-sm text-red-500 hover:text-red-700">Tüm Rapor Verilerini Temizle</button>
            </div>
        </div>

        <!-- === RAPOR ÖNİZLEME ALANI === -->
        <div class="col-span-12 lg:col-span-7 xl:col-span-8">
            <div id="report-preview">
                <!-- İçerik JavaScript ile dinamik olarak buraya eklenecek -->
            </div>
        </div>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- DEĞİŞKENLER VE DOM ELEMENTLERİ ---
            const markdownConverter = new showdown.Converter();
            const reportPreview = document.getElementById('report-preview');
            const tabs = document.getElementById('tabs');
            const tabPanes = document.querySelectorAll('.tab-pane');
            const findingForm = document.getElementById('tab-findings');
            
            // Veri yapısı
            let reportData = {
                metadata: {
                    kurumAdi: 'TWITTER',
                    testTuru: 'Yerel Ağ Sızma Testi Sonuç Raporu',
                    versiyon: '1.1',
                    testTarihi: '02-04 Ocak 2025',
                    testEkibi: `Tutku, Sızma Testi Uzmanı, "OSCP, OSCE"\nAhsen, Sızma Testi Uzmanı, "TSE, ISO 27001 LA"`
                },
                content: {
                    executive: `Bu sızma testi, kurumumuzun bilgi teknolojileri altyapısının içeriden ve dışarıdan gelebilecek siber tehditlere karşı mevcut direncini ölçmek amacıyla gerçekleştirilmiştir...`,
                    assessment: `Gerçekleştirilen sızma testi sonucunda, kurumumuzun bilgi teknolojileri altyapısında farklı katmanlara yayılmış çeşitli güvenlik açıkları tespit edilmiştir...`,
                    methodology: `Bu sızma testi çalışması, kurum içindeki güvenlik açıklarının belirlenmesi amacıyla, sınırlı sistem bilgisi ile gerçekleştirilen bir “Gri Kutu (Grey Box)” yaklaşımı ile uygulanmıştır...`,
                    scope: `Bu sızma testi, TWITTER kurumunun bilgi sistemleri üzerindeki güvenlik kontrollerinin değerlendirilmesi amacıyla, kurumun talebi ve onayı doğrultusunda gerçekleştirilmiştir...`
                },
                findings: []
            };

            // --- FONKSİYONLAR ---

            // Risk seviyesine göre renk ve metin döndüren fonksiyon
            const getSeverityDetails = (severity) => {
                const severities = {
                    'Acil': { bg: 'bg-red-800', border: 'border-red-800', text: 'text-white' },
                    'Kritik': { bg: 'bg-red-600', border: 'border-red-600', text: 'text-white' },
                    'Yüksek': { bg: 'bg-orange-500', border: 'border-orange-500', text: 'text-white' },
                    'Orta': { bg: 'bg-yellow-400', border: 'border-yellow-400', text: 'text-gray-900' },
                    'Düşük': { bg: 'bg-blue-500', border: 'border-blue-500', text: 'text-white' }
                };
                return severities[severity] || { bg: 'bg-gray-500', border: 'border-gray-500', text: 'text-white' };
            };
            
            // Markdown'ı HTML'e çevirme
            const mdToHtml = (md) => markdownConverter.makeHtml(md).replace(/<p>/g, '').replace(/<\/p>/g, '<br>');

            // Raporu ekranda render eden ana fonksiyon
            function renderReport() {
                reportPreview.innerHTML = '';
                
                // Kapak Sayfası
                const coverPage = document.createElement('div');
                coverPage.className = 'report-page';
                coverPage.innerHTML = `
                    <div class="text-center flex flex-col items-center justify-center h-[90vh]">
                        <p class="text-2xl font-semibold text-gray-600">${reportData.metadata.kurumAdi}</p>
                        <h1 class="text-6xl font-extrabold text-gray-900 my-4">${reportData.metadata.testTuru}</h1>
                        <p class="text-xl text-gray-500 mt-8">Versiyon: ${reportData.metadata.versiyon}</p>
                        <p class="text-xl text-gray-500">Test Tarihi: ${reportData.metadata.testTarihi}</p>
                    </div>
                `;
                reportPreview.appendChild(coverPage);
                
                // Yönetici Özeti
                const execSummaryPage = document.createElement('div');
                execSummaryPage.className = 'report-page';
                execSummaryPage.innerHTML = `
                    <h2>Yönetici Özeti</h2>
                    <div class="prose max-w-none text-gray-700 leading-relaxed">${mdToHtml(reportData.content.executive)}</div>
                `;
                reportPreview.appendChild(execSummaryPage);
                
                // Bulgu Özetleri
                if(reportData.findings.length > 0) {
                    const summaryPage = document.createElement('div');
                    summaryPage.className = 'report-page';
                    
                    // Özet Tablo
                    let summaryTableHtml = `
                        <h3 class="text-xl font-bold mb-4">Bulgu Özet Tablosu</h3>
                        <table class="w-full text-left border-collapse summary-table">
                            <thead>
                                <tr class="bg-gray-100">
                                    <th class="p-2 border">Ref No</th>
                                    <th class="p-2 border">Bulgu Adı</th>
                                    <th class="p-2 border">Önem Derecesi</th>
                                </tr>
                            </thead>
                            <tbody>
                    `;
                    reportData.findings.forEach(f => {
                         const severity = getSeverityDetails(f.severity);
                         summaryTableHtml += `<tr>
                            <td class="p-2 border">${f.ref}</td>
                            <td class="p-2 border">${f.name}</td>
                            <td class="p-2 border"><span class="px-2 py-1 text-xs font-semibold rounded-full ${severity.bg} ${severity.text}">${f.severity}</span></td>
                         </tr>`;
                    });
                    summaryTableHtml += '</tbody></table>';
                    
                    // Kategori Tablosu
                    const categoryCounts = {};
                    const severities = ['Acil', 'Kritik', 'Yüksek', 'Orta', 'Düşük'];
                    const categories = [...new Set(reportData.findings.map(f => f.category))];

                    categories.forEach(cat => {
                        categoryCounts[cat] = { 'Acil': 0, 'Kritik': 0, 'Yüksek': 0, 'Orta': 0, 'Düşük': 0, 'TOPLAM': 0 };
                    });

                    reportData.findings.forEach(f => {
                        categoryCounts[f.category][f.severity]++;
                        categoryCounts[f.category]['TOPLAM']++;
                    });

                    let categoryTableHtml = `<h3 class="text-xl font-bold mt-12 mb-4">Kategoriye Göre Bulgu Tablosu</h3>
                        <table class="w-full text-left border-collapse summary-table">
                         <thead><tr class="bg-gray-100">
                            <th class="p-2 border">Kategoriler</th>
                            ${severities.map(s => `<th class="p-2 border">${s.toUpperCase()}</th>`).join('')}
                            <th class="p-2 border">TOPLAM</th>
                         </tr></thead><tbody>`;

                    categories.forEach(cat => {
                        categoryTableHtml += `<tr><td class="p-2 border font-semibold">${cat}</td>`;
                        severities.forEach(s => {
                            categoryTableHtml += `<td class="p-2 border text-center">${categoryCounts[cat][s] || 0}</td>`;
                        });
                        categoryTableHtml += `<td class="p-2 border text-center font-bold">${categoryCounts[cat]['TOPLAM']}</td></tr>`;
                    });
                    
                    categoryTableHtml += '</tbody></table>';

                    summaryPage.innerHTML = `<h2>Bulgu Özetleri</h2> ${summaryTableHtml} ${categoryTableHtml}`;
                    reportPreview.appendChild(summaryPage);
                }

                // Bulgular
                const findingsByCat = reportData.findings.reduce((acc, f) => {
                    if (!acc[f.category]) acc[f.category] = [];
                    acc[f.category].push(f);
                    return acc;
                }, {});
                
                Object.keys(findingsByCat).forEach(category => {
                    const categoryPage = document.createElement('div');
                    categoryPage.className = 'report-page';
                    let categoryHtml = `<h2>${category}</h2>`;
                    
                    findingsByCat[category].forEach(vuln => {
                        const severity = getSeverityDetails(vuln.severity);
                        let proofHtml = '';
                        if (vuln.proof) {
                            proofHtml = '<div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">';
                            vuln.proof.split('\n').filter(url => url.trim() !== '').forEach(url => {
                                proofHtml += `
                                <div class="border rounded-lg p-2">
                                  <img src="${url}" alt="Kanıt Ekran Görüntüsü" class="w-full h-auto object-contain rounded" onerror="this.onerror=null;this.src='https://placehold.co/600x400/f3f4f6/9ca3af?text=G%C3%B6rsel+Y%C3%BCklenemedi';">
                                </div>`;
                            });
                            proofHtml += '</div>';
                        }
                        
                        categoryHtml += `
                            <div class="vulnerability-card p-6 rounded-lg shadow-md ${severity.bg.replace('bg-', 'bg-opacity-10 ')} ${severity.border} my-8">
                                <div class="flex justify-between items-start mb-4">
                                    <h3 class="text-2xl font-bold ${severity.border.replace('border-','text-')}">${vuln.ref}: ${vuln.name}</h3>
                                    <span class="text-sm font-bold py-1 px-3 rounded-full ${severity.bg} ${severity.text}">${vuln.severity}</span>
                                </div>
                                <p class="text-sm text-gray-600 mb-4"><strong>Etkilenen Sistemler:</strong> ${vuln.affected || 'Belirtilmemiş'}</p>

                                <div class="mb-6">
                                    <h4 class="text-lg font-semibold text-gray-800 border-b border-gray-300 pb-1 mb-2">Bulgu Açıklaması</h4>
                                    <div class="prose max-w-none text-gray-700">${mdToHtml(vuln.description)}</div>
                                </div>

                                <div class="mb-6">
                                    <h4 class="text-lg font-semibold text-gray-800 border-b border-gray-300 pb-1 mb-2">Çözüm Önerisi</h4>
                                    <div class="prose max-w-none text-gray-700">${mdToHtml(vuln.remediation)}</div>
                                </div>
                                ${proofHtml ? `
                                <div>
                                    <h4 class="text-lg font-semibold text-gray-800 border-b border-gray-300 pb-1 mb-2">Kanıtlar</h4>
                                    ${proofHtml}
                                </div>` : ''}
                            </div>
                        `;
                    });
                    categoryPage.innerHTML = categoryHtml;
                    reportPreview.appendChild(categoryPage);
                });
            }
            
            // Form verilerini `reportData` objesine kaydetme
            function updateDataFromInputs() {
                 Object.keys(reportData.metadata).forEach(key => {
                    reportData.metadata[key] = document.getElementById(`meta-${key}`).value;
                });
                Object.keys(reportData.content).forEach(key => {
                    reportData.content[key] = document.getElementById(`content-${key}`).value;
                });
                saveData();
                renderReport();
            }
            
            // `reportData`'dan form inputlarını doldurma
            function updateInputsFromData() {
                 Object.keys(reportData.metadata).forEach(key => {
                    const el = document.getElementById(`meta-${key}`);
                    if(el) el.value = reportData.metadata[key];
                });
                Object.keys(reportData.content).forEach(key => {
                    const el = document.getElementById(`content-${key}`);
                    if(el) el.value = reportData.content[key];
                });
            }

            // Veriyi localStorage'e kaydetme
            function saveData() {
                localStorage.setItem('pentestReportData', JSON.stringify(reportData));
            }

            // Veriyi localStorage'den yükleme
            function loadData() {
                const savedData = localStorage.getItem('pentestReportData');
                if (savedData) {
                    reportData = JSON.parse(savedData);
                }
            }
            
            // --- EVENT LISTENERS ---
            
            // Sekme değiştirme
            tabs.addEventListener('click', (e) => {
                if (e.target.classList.contains('tab-button')) {
                    const tabId = e.target.getAttribute('data-tab');
                    document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                    e.target.classList.add('active');
                    tabPanes.forEach(pane => {
                        if (pane.id === tabId) {
                            pane.classList.remove('hidden');
                        } else {
                            pane.classList.add('hidden');
                        }
                    });
                }
            });

            // Bulgu ekleme formu
            findingForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const newFinding = {
                    ref: document.getElementById('vuln-ref').value,
                    category: document.getElementById('vuln-category').value,
                    name: document.getElementById('vuln-name').value,
                    severity: document.getElementById('vuln-severity').value,
                    affected: document.getElementById('vuln-affected').value,
                    description: document.getElementById('vuln-description').value,
                    remediation: document.getElementById('vuln-remediation').value,
                    proof: document.getElementById('vuln-proof').value,
                };
                reportData.findings.push(newFinding);
                // Bulguları ref no'ya göre sırala
                reportData.findings.sort((a,b) => a.ref.localeCompare(b.ref));
                saveData();
                renderReport();
                findingForm.reset();
            });
            
            // Input değişikliklerini dinleme
            document.getElementById('tab-meta').addEventListener('input', updateDataFromInputs);
            document.getElementById('tab-content').addEventListener('input', updateDataFromInputs);

            // Yazdır butonu
            document.getElementById('print-button').addEventListener('click', () => window.print());
            
            // Veri temizleme butonu
            document.getElementById('clear-data').addEventListener('click', () => {
                if(confirm('Emin misiniz? Tüm rapor verileri kalıcı olarak silinecek.')) {
                    localStorage.removeItem('pentestReportData');
                    location.reload();
                }
            });

            // --- BAŞLATMA ---
            loadData();
            updateInputsFromData();
            renderReport();
        });
    </script>
</body>
</html>
